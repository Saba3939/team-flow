const chalk = require('chalk');
const fs = require('fs-extra');
const path = require('path');
const config = require('../config');

class Logger {
  constructor() {
    this.logLevel = config.get('app.debug') ? 'debug' : 'info';
    this.logFile = path.join(process.cwd(), '.team-flow.log');
  }

  // „É≠„Ç∞„É¨„Éô„É´„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
  _shouldLog(level) {
    const levels = {
      error: 0,
      warn: 1,
      info: 2,
      debug: 3
    };
    return levels[level] <= levels[this.logLevel];
  }

  // ÁèæÂú®ÊôÇÂàª„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
  _getCurrentTime() {
    return new Date().toISOString();
  }

  // „É≠„Ç∞„Éï„Ç°„Ç§„É´„Å∏„ÅÆÊõ∏„ÅçËæº„Åø
  async _writeToFile(level, message) {
    try {
      const logEntry = `[${this._getCurrentTime()}] [${level.toUpperCase()}] ${message}\n`;
      await fs.appendFile(this.logFile, logEntry);
    } catch (error) {
      // „É≠„Ç∞„Éï„Ç°„Ç§„É´Êõ∏„ÅçËæº„Åø„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñÔºàÂæ™Áí∞ÂèÇÁÖß„ÇíÈÅø„Åë„Çã„Åü„ÇÅÔºâ
      console.error('„É≠„Ç∞„Éï„Ç°„Ç§„É´Êõ∏„ÅçËæº„Åø„Ç®„É©„Éº:', error.message);
    }
  }


  // „Ç®„É©„Éº„É≠„Ç∞
  error(message, error = null) {
    if (!this._shouldLog('error')) return;

    const errorMsg = error ? `${message} - ${error.message}` : message;
    console.error(chalk.red('‚ùå „Ç®„É©„Éº:'), errorMsg);

    if (error && config.get('app.debug')) {
      console.error(chalk.gray(error.stack));
    }

    this._writeToFile('error', errorMsg);
  }

  // Ë≠¶Âëä„É≠„Ç∞
  warn(message) {
    if (!this._shouldLog('warn')) return;

    console.warn(chalk.yellow('‚ö†Ô∏è  Ë≠¶Âëä:'), message);
    this._writeToFile('warn', message);
  }

  // ÊÉÖÂ†±„É≠„Ç∞
  info(message) {
    if (!this._shouldLog('info')) return;

    console.info(chalk.blue('‚ÑπÔ∏è  ÊÉÖÂ†±:'), message);
    this._writeToFile('info', message);
  }

  // ÊàêÂäü„É≠„Ç∞
  success(message) {
    if (!this._shouldLog('info')) return;

    console.log(chalk.green('‚úÖ ÊàêÂäü:'), message);
    this._writeToFile('info', `SUCCESS: ${message}`);
  }

  // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞
  debug(message) {
    if (!this._shouldLog('debug')) return;

    console.log(chalk.gray('üîç „Éá„Éê„ÉÉ„Ç∞:'), message);
    this._writeToFile('debug', message);
  }

  // „Éó„É≠„Çª„ÇπÈñãÂßã„É≠„Ç∞
  startProcess(message) {
    console.log(chalk.cyan('üöÄ ÈñãÂßã:'), message);
    this._writeToFile('info', `START: ${message}`);
  }

  // „Éó„É≠„Çª„ÇπÁµÇ‰∫Ü„É≠„Ç∞
  endProcess(message) {
    console.log(chalk.magenta('üèÅ ÂÆå‰∫Ü:'), message);
    this._writeToFile('info', `END: ${message}`);
  }

  // „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅÆ„ÇØ„É™„Ç¢
  async clearLog() {
    try {
      await fs.remove(this.logFile);
      this.info('„É≠„Ç∞„Éï„Ç°„Ç§„É´„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü');
    } catch (error) {
      this.error('„É≠„Ç∞„Éï„Ç°„Ç§„É´„ÇØ„É™„Ç¢„Å´Â§±Êïó', error);
    }
  }

  // „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÂèñÂæó
  async getLogContent() {
    try {
      return await fs.readFile(this.logFile, 'utf8');
    } catch (error) {
      this.warn('„É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì');
      return '';
    }
  }
}

module.exports = new Logger();